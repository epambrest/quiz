@model Teams.Models.MultipleAnswerQuestionViewModel
@{
    ViewData["Title"] = "QuestForm";
    var Answers = Model.SourceQuestion.Answers.ToList();
}
<style>
    .border_for_the_right_answer {
        border: 3px solid;
        border-color: green;
    }
</style>
<h2>@(Model.SourceQuestion.QuestionText)</h2>
@using (Html.BeginForm("MultipleAnswerQuestionForm", "MultipleAnswerQuestion", FormMethod.Get))
{
    <input readonly hidden name="Id" value="@Model.SourceQuestion.Id" />
    <div id="options_container">
        @for (int i = 0; i < Model.SourceQuestion.Answers.Count; i++)
        {
            <div id="div[@i]" name="div">
                <input type="checkbox" id="answers[@i]" name="answers" value="@i" />
                <label for="answers[@i]" id="@Answers[i].Id">@Answers[i].Text</label>
            </div>
        }
    </div>
    if (Model.ChosenOptions is null)
    {
        <input type="submit" name="check">
    }
    else
    {
<script>
    function show_right_answers()
    {
        let answers = document.getElementsByName("answers");
        answers.forEach(a => a.disabled = true);
        let chosenOptions = @Html.Raw(Json.Serialize(Model.ChosenOptions));
        let rights = @Html.Raw(Json.Serialize(Model.SourceQuestion.GetRightAnswersIds()));
        for (var i = 0; i < chosenOptions.length; i++)
        {
            answers[chosenOptions[i]].checked = true;
        }
        $("#options_container label").each((index, element) =>
        {
            if (rights.includes(element.id)) $(element).addClass("border_for_the_right_answer");
        });
    }
    window.addEventListener('load', show_right_answers);
</script>
    }
}